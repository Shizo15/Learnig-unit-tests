name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # 1. Pobranie kodu
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Instalacja Pythona
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.13.0

    # 3. Instalacja zależności
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

     # 4. Uruchamianie testów z ustawieniem PYTHONPATH
    - name: Run unit tests with coverage
      run: |
        export PYTHONPATH=$PWD/src  # Ustawienie PYTHONPATH do katalogu src
        pytest -vv --cov=src --cov=tests --cov-report=xml

    # 5. Przesyłanie raportu pokrycia do GitHub (raport w formacie XML)
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml

#    # 5. Przesyłanie raportu pokrycia do GitHub (opcjonalne, jeśli używasz Codecov lub podobnego narzędzia)
#    - name: Upload coverage report
#      uses: codecov/codecov-action@v3
#      with:
#        files: ./coverage.xml

#  lint:
#    runs-on: ubuntu-latest
#
#    steps:
#    # 1. Pobranie kodu
#    - name: Checkout code
#      uses: actions/checkout@v3
#
#    # 2. Uruchamianie Super-Lintera
#    - name: Run Super-Linter
#      uses: github/super-linter@v5
#      env:
#        VALIDATE_PYTHON_PYLINT: true
#        VALIDATE_ALL_CODEBASE: true
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        DEFAULT_BRANCH: main

#  todo:
#    runs-on: ubuntu-latest
#
#    steps:
#    # 1. Pobranie kodu
#    - name: Checkout code
#      uses: actions/checkout@v3
#
#    # 2. Tworzenie Issues z komentarzy TODO
#    - name: Create Issues from TODO
#      uses: alstr/todo-to-issue-action@v1
#      with:
#        repo-token: ${{ secrets.GITHUB_TOKEN }}
#        label: "TODO"
